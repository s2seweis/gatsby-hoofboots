{"version":3,"file":"component---src-pages-pferde-[id]-besonderheiten-tsx-08e98a36cb50244f0805.js","mappings":"mRAEA,MAAMA,EAAe,CACnBC,WAAY,aACZC,MAAO,OACPC,aAAc,aACdC,UAAW,cACXC,aAAc,mBACdC,WAAY,eACZC,gBAAiB,gBACjBC,uBAAwB,qBACxBC,mBAAoB,oBACpBC,0BAA2B,yBAC3BC,mBAAoB,oBACpBC,0BAA2B,0BAkCtB,SAASC,EAAcC,EAAOC,GAEnC,MAAM,WACJd,EAAU,UACVG,EAAS,gBACTG,EAAe,aACfF,EAAY,MACZH,EAAK,mBACLO,EAAkB,mBAClBE,KACGK,GACDF,EAEEG,EAAkB,CAAC,EAkBzB,MAjBkB,CAChB,aACA,YACA,kBACA,eACA,QACA,qBACA,sBAGQC,SAASC,IACjBF,EAAgBE,IAAOC,EAAAA,EAAAA,GACrBL,EAAII,GAAKE,SAASC,kBAClBR,EAAMd,EAAamB,IACpB,IAGII,OAAOC,OAAOR,EAAWC,EAClC,C,cCtEO,MAAMQ,EAAY,CACvBxB,WAAY,GACZC,MAAO,GACPC,aAAc,GACdC,UAAW,GACXsB,iBAAkB,GAClBrB,aAAc,GACdC,YAAY,EACZC,gBAAiB,GACjBC,uBAAwB,GACxBC,mBAAoB,GACpBC,0BAA2B,GAC3BC,mBAAoB,GACpBC,0BAA2B,IAGd,SAASe,EAA4B,GAIhD,IAJgD,IAClDZ,EAAG,aACHa,EAAY,4BACZC,GACD,EACC,MAAM,EAACf,EAAM,EAACgB,IAAYC,EAAAA,EAAAA,UAASH,GAAgBH,GAE7CO,GAAYC,EAAAA,EAAAA,WACZ,EAACC,EAAQ,EAACC,IAAcJ,EAAAA,EAAAA,UAAS,IACjCK,GAAeH,EAAAA,EAAAA,WACf,EAACI,IAAmBN,EAAAA,EAAAA,WAAS,GA+FnC,OA5FAO,EAAAA,EAAAA,YAAU,KAGwB,iBAArBxB,EAAMb,YAA2Ba,EAAMb,YAChD6B,EAASjB,EAAcC,EAAOC,GAChC,GACC,KAGHuB,EAAAA,EAAAA,YAAU,KAAO,IAAD,IACd,GAAwB,QAAxB,EAAIF,EAAaG,eAAO,OAAO,QAAP,EAApB,EAAsBC,aAAK,OAA3B,EAA8B,GAAI,CACpC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACfd,GAAUe,IAAS,IACdA,EACHC,wBAAyBF,EAAMG,OAAOC,UACrC,EAELP,EAAOQ,cAAcb,EAAaG,QAAQC,MAAM,GAClD,IACC,CAACH,IA4EF,gBAAC,IAAY,CAACa,SAzEhB,SAAkBN,GAChBA,EAAMO,iBAEN,IAAIC,GAAiB,EAyDrB,GApDA7B,OAAO8B,KAAKvC,GAAOI,SAASC,IAC1B,MAAMmC,EAAOxC,EAAMK,IAEjBmC,IACkB,iBAATA,GAAkD,IAA7B/B,OAAO8B,KAAKC,GAAMC,SAC7CD,GACFnC,EAAIqC,SAAS,WACbrC,EAAIqC,SAAS,UACN,UAARrC,GACQ,eAARA,IAEAiC,GAAiB,EACnB,IAIF,CACE,QACA,YACA,kBACA,qBACA,sBACAlC,SAASuC,IAEN3C,EAAM2C,KACN3C,EAAM2C,GAAGC,QAAU3C,EAAI0C,GAAGpC,SAASC,kBAAkBiC,OAAS,GAC5DzC,EAAM2C,EAAI,cAGL,UAANA,IACA3C,EAAa,OACY,UAAxBA,EAAkB,YAAyC,SAAxBA,EAAkB,WAGvC,UAAN2C,IACTL,GAAiB,GAFjBA,GAAiB,EAIrB,KAIEtC,EAAa,OACY,UAAxBA,EAAkB,YAAyC,SAAxBA,EAAkB,aACxDA,EAAa,MAAE4C,QACb3C,EAAW,MAAEM,SAASC,kBAAkBiC,OAAS,IAClDzC,EAAa,MAAE4C,QACd3C,EAAW,MAAEM,SAASC,kBAAkBiC,OAAS,GAChDzC,EAAyB,gBAE5BsC,GAAiB,GAGfA,EAGF,OAFAjB,EAAWpB,EAAI4C,KAAKC,mBACpB5B,EAAUO,QAAQsB,MAAMC,QAAU,UAIpCjC,ED/GG,SAAuBf,GAE5B,MAAM,WACJb,EAAU,UACVG,EAAS,gBACTG,EAAe,aACfF,EAAY,MACZH,EAAK,mBACLO,EAAkB,mBAClBE,KACGK,GACDF,EAEEG,EAAkB,CAAC,EAezB,MAdkB,CAChB,aACA,YACA,kBACA,eACA,QACA,qBACA,sBAGQC,SAASC,IACjBF,EAAgBE,GAAOL,EAAMK,GAAK4C,KAAK,IAGlCxC,OAAOC,OAAOR,EAAWC,EAClC,CCkFgC+C,CAAclD,GAC5C,GAOI,gBAACmD,EAAA,EAAI,MACJ1C,OAAO8B,KAAKtC,GAAKmD,KAAI,CAAC/C,EAAKuC,KAAW,IAAD,QACpC,GAAY,SAARvC,EAAgB,OACpB,MAAMgD,EAAQpD,EAAII,GAKlB,IACIiD,EAGJ,GAAY,UAARjD,EAAiB,CAAC,IAAD,QAEnB,IAEuB,QAAnB,EAAAL,EAAkB,kBAAC,aAAnB,EAAqBiD,UACF,QADO,EACxBhD,EAAgB,kBAAC,aAAjB,EAAmBM,SAASC,kBAAkB,MAC7B,QAAnB,EAAAR,EAAkB,kBAAC,aAAnB,EAAqBiD,UACF,QADO,EACxBhD,EAAgB,kBAAC,aAAjB,EAAmBM,SAASC,kBAAkB,IAGlD,QAIAR,EAAMK,IACLL,EAAMK,GAAK4C,QACVhD,EAAW,MAAEM,SAASN,EAAW,MAAEM,SAASkC,OAAS,IACrDzC,EAAMK,GAAK4C,QACThD,EAAW,MAAEM,SAASN,EAAW,MAAEM,SAASkC,OAAS,KAEzDa,EACE,gCACE,uBAAKC,UAAW,gBACd,yBAAOC,QAASnD,EAAM,oBACnBJ,EAAIb,MAAMqE,gBAEb,gBAACC,EAAA,EAAU,CACTC,GAAItD,EAAM,mBACVL,MAAOA,EACPgB,SAAUA,EACV4C,KAAM,eACNX,MAAOjD,EAAoB,aAC3B6D,KAAM,WAMlB,CAGY,cAARxD,GAGAL,EAAiB,WACjBA,EAAiB,UAAEiD,QACjBhD,EAAe,UAAEM,SAASN,EAAe,UAAEM,SAASkC,OAAS,KAE/Da,EACE,uBAAKC,UAAW,gBACd,yBAAOC,QAASnD,EAAM,oBACnBJ,EAAIX,UAAUwE,cAEjB,gBAACJ,EAAA,EAAU,CACTC,GAAItD,EAAM,mBACVL,MAAOA,EACPgB,SAAUA,EACV4C,KAAM,mBACNX,MAAOjD,EAAwB,iBAC/B6D,KAAM,WAShB,MAAME,EAAW9D,EAAqB,gBAAEM,SAE9B,oBAARF,GACAL,EAAuB,iBACvBA,EAAuB,gBAAEiD,QAAUc,EAASA,EAAStB,OAAS,KAE9Da,EACE,uBAAKC,UAAW,gBACd,yBAAOC,QAASnD,EAAM,oBACnBJ,EAAIR,gBAAgBqE,cAEvB,gBAACJ,EAAA,EAAU,CACTC,GAAItD,EAAM,mBACVL,MAAOA,EACPgB,SAAUA,EACV4C,KAAM,yBACNX,MAAOjD,EAA8B,uBACrC6D,KAAM,eAQd,MAAMG,EAAY/D,EAAwB,mBAAEM,SAElC,uBAARF,GACAL,EAA0B,oBAC1BA,EAA0B,mBAAEiD,QAAUe,EAAUA,EAAUvB,OAAS,KAEnEa,EACE,uBAAKC,UAAW,gBACd,yBAAOC,QAASnD,EAAM,oBACnBJ,EAAIN,mBAAmBmE,cAE1B,gBAACJ,EAAA,EAAU,CACTC,GAAItD,EAAM,mBACVL,MAAOA,EACPgB,SAAUA,EACV4C,KAAM,4BACNX,MAAOjD,EAAiC,0BACxC6D,KAAM,eAOd,MAAMI,EAAYhE,EAAwB,mBAAEM,SA0B5C,MAxBU,uBAARF,GACAL,EAA0B,oBAC1BA,EAA0B,mBAAEiD,QAAUgB,EAAUA,EAAUxB,OAAS,KAEnEa,EACE,uBAAKC,UAAW,gBACd,yBAAOC,QAASnD,EAAM,oBACnBJ,EAAIJ,mBAAmBiE,cAE1B,gBAACJ,EAAA,EAAU,CACTC,GAAItD,EAAM,mBACVL,MAAOA,EACPgB,SAAUA,EACV4C,KAAM,4BACNX,MAAOjD,EAAiC,0BACxC6D,KAAM,eAUZ,gBAAC,IAAU,CACTK,MAAOb,EAAMc,MACbC,QAASf,EAAMgB,QACfC,KAAMjB,EAAMkB,UACZC,KAAMnB,EAAMoB,QACZC,SAzJAA,UA0JArE,IAAK,cAAgBuC,GAErB,gBAACc,EAAA,EAAU,CACT1D,MAAOA,EACPgB,SAAUA,EACV4C,KAAMvD,EACN4C,MAAOjD,EAAMK,GACbsE,QAAStB,EAAM9C,SACfsD,MAAe,QAAT,EAAAR,EAAMuB,WAAG,aAAT,EAAWC,gBAAiB,SAClCC,OAAQ,CACK,QADL,EACNzB,EAAM0B,aAAK,aAAX,EAAaC,UACF,QADW,EACtB3B,EAAM4B,aAAK,aAAX,EAAaD,UACF,QADW,EACtB3B,EAAM6B,aAAK,aAAX,EAAaF,aAGhB1B,EACU,IAIjB,uBAAKC,UAAW,cACd,wBAAMA,UAAW,WAAY4B,IAAKjE,GAC/BE,GAEH,gBAACgE,EAAA,EAAM,CAAC7B,UAAW,uBAAwBtD,EAAI4C,KAAKwC,YAI5D,C,cClTO,MAAMC,EAA8BC,IAGF,IAHG,QAC1CC,EAAO,IACPvF,GACiC,EACjC,MAAMwF,GAAOC,EAAAA,EAAAA,KAAa1F,GAAqBA,EAAM2F,KAAKF,QAElDG,KAAMC,EAAS,UAAEC,IAAcC,EAAAA,EAAAA,IACrC,CAAEC,OAAQP,aAAI,EAAJA,EAAM9B,GAAc6B,QAASA,GACvC,CACES,2BAA2B,EAC3BC,MAAOV,KAIJW,EAAaC,IAAqBC,EAAAA,EAAAA,MAkCzC,OANA7E,EAAAA,EAAAA,YAAU,KACJ4E,EAAkBE,YACpBC,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,WAAkBhB,GAC7B,GACC,CAACY,IAEAN,GAAaM,EAAkBN,UAC1BW,EAAAA,cAAAA,OAAAA,KAAAA,UAGLL,EAAkBM,MACbD,EAAAA,cAACE,EAAAA,EAAK,CAACC,SAAU,SAAQ,yBAIhCH,EAAAA,cAAC5F,EAA2B,CAC1BZ,IAAKA,EACLc,4BAA6B8F,eA3CGA,WAClC,MAAMC,EAAa,CACjBC,wBAAyB,CACvBC,WAAYD,EAAwB5H,WACpC8H,KAAMF,EAAwB3H,MAC9B8H,WAAYH,EAAwB1H,aACpC8H,YAAaJ,EAAwBzH,UACrC8H,iBAAkBL,EAAwBxH,aAC1C8H,kBAAmBN,EAAwBpH,mBAC3C2H,uBACEP,EAAwBnH,0BAC1B2H,kBAAmBR,EAAwBlH,mBAC3C2H,uBACET,EAAwBjH,0BAC1B2H,cAAeV,EAAwBtH,gBACvCiI,mBAAoBX,EAAwBrH,+BAI1CyG,EAAY,CAChBH,OAAQP,aAAI,EAAJA,EAAM9B,GACd6B,QAASA,EACTI,KAAMkB,GACN,EAqBQ/F,CAA4BgG,EAAwB,EAE5DY,MAAO9B,EACP/E,aACE+E,EAAUkB,wBACNhH,EAAc8F,EAAUkB,wBAAyB9G,GAuCjDU,GAEN,ECrHS,SAASiH,EAA4BC,GAClD,MAAM,KAAEjC,EAAI,SAAEkC,EAAUnE,GAAI6B,GAAYqC,EAExC,OACEpB,EAAAA,cAACsB,EAAAA,EAAS,CACR7D,MAAO,iBACP8D,YAAa,OACbxC,QAASA,EACTyC,gBAAgB,EAChBC,UAAW1B,EAAAA,EAAAA,WAAkBhB,GAC7BsC,SAAUA,GAEVrB,EAAAA,cAACnB,EAA2B,CAC1BrF,IAAK2F,EAAqC,+BAC1CJ,QAASA,IAIjB,C,kGCtBA,MAAM2C,EAAcC,EAAAA,QAAAA,IAAAA,WAAU,6DAAVA,CAAU,qDAMf,SAASjF,IACtB,OACE,gBAAC,EAAAkF,YAAW,CACVC,MAAK,YASLC,OAAS3C,GACP,gBAACuC,EAAW,KACV,gBAAC,EAAAK,EAAW,CACVC,MAAO7C,EAAK8C,QAAQC,gBAAgBC,gBACpCC,IAAK,sBAMjB,C","sources":["webpack://hufschuhapp.frontend/./src/services/upload/factFileParticularities/parseFactFileParticularities.js","webpack://hufschuhapp.frontend/./src/components/App/FactFile/Particularities/FactFileParticularitiesForm.js","webpack://hufschuhapp.frontend/./src/components/App/FactFile/Particularities/FactFileParticularitiesData.tsx","webpack://hufschuhapp.frontend/./src/pages/pferde/[id]/besonderheiten.tsx","webpack://hufschuhapp.frontend/./src/components/App/Misc/Logo.js"],"sourcesContent":["import { findOption } from \"../../../components/App/Misc/strapiArrayToOptions\";\n\nconst fieldMapping = {\n  Equidenart: \"equineType\",\n  Rasse: \"race\",\n  Rasse_Andere: \"raceOthers\",\n  Reitweise: \"ridingStyle\",\n  Nutzungszeit: \"weeklyRidingTime\",\n  Beschlagen: \"hasHorseShoe\",\n  Vorerkrankungen: \"preconditions\",\n  Vorerkrankungen_Andere: \"preconditionsOther\",\n  Hufvorerkrankungen: \"hoofPreconditions\",\n  Hufvorerkrankungen_Andere: \"hoofPreconditionsOther\",\n  Stellungsanomalien: \"positionAnomalies\",\n  Stellungsanomalien_Andere: \"positionAnomaliesOther\",\n};\n\nexport function localToStrapi(state) {\n  // attributes that need to be changed\n  const {\n    Equidenart,\n    Reitweise,\n    Vorerkrankungen,\n    Nutzungszeit,\n    Rasse,\n    Hufvorerkrankungen,\n    Stellungsanomalien,\n    ...restState\n  } = state;\n\n  const convertedFields = {};\n  const toConvert = [\n    \"Equidenart\",\n    \"Reitweise\",\n    \"Vorerkrankungen\",\n    \"Nutzungszeit\",\n    \"Rasse\",\n    \"Hufvorerkrankungen\",\n    \"Stellungsanomalien\",\n  ];\n\n  toConvert.forEach((key) => {\n    convertedFields[key] = state[key].value;\n  });\n\n  return Object.assign(restState, convertedFields);\n}\n\nexport function strapiToLocal(state, cms) {\n  // attributes that need to be changed\n  const {\n    Equidenart,\n    Reitweise,\n    Vorerkrankungen,\n    Nutzungszeit,\n    Rasse,\n    Hufvorerkrankungen,\n    Stellungsanomalien,\n    ...restState\n  } = state;\n\n  const convertedFields = {};\n  const toConvert = [\n    \"Equidenart\",\n    \"Reitweise\",\n    \"Vorerkrankungen\",\n    \"Nutzungszeit\",\n    \"Rasse\",\n    \"Hufvorerkrankungen\",\n    \"Stellungsanomalien\",\n  ];\n\n  toConvert.forEach((key) => {\n    convertedFields[key] = findOption(\n      cms[key].Optionen.strapi_json_value,\n      state[fieldMapping[key]]\n    );\n  });\n\n  return Object.assign(restState, convertedFields);\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { FactFileForm } from \"../styled\";\nimport { InputGroup, TypedInput } from \"../TypedInput\";\nimport { Button } from \"../../Misc/Button\";\nimport {\n  localToStrapi,\n  strapiToLocal,\n} from \"../../../../services/upload/factFileParticularities/parseFactFileParticularities\";\nimport Logo from \"../../Misc/Logo\";\n\nexport const f2initial = {\n  Equidenart: \"\",\n  Rasse: \"\",\n  Rasse_Andere: \"\",\n  Reitweise: \"\",\n  Reitweise_Andere: \"\",\n  Nutzungszeit: \"\",\n  Beschlagen: false,\n  Vorerkrankungen: \"\",\n  Vorerkrankungen_Andere: \"\",\n  Hufvorerkrankungen: \"\",\n  Hufvorerkrankungen_Andere: \"\",\n  Stellungsanomalien: \"\",\n  Stellungsanomalien_Andere: \"\",\n};\n\nexport default function FactFileParticularitiesForm({\n  cms,\n  initialState,\n  saveFactFileParticularities,\n}) {\n  const [state, setState] = useState(initialState || f2initial);\n\n  const messagRef = useRef();\n  const [message, setMessage] = useState(\"\");\n  const fileInputRef = useRef();\n  const [fileInputChange] = useState(false);\n\n  // if data is sourced from strapi, need to parse some field, e.g. checkbox and selects\n  useEffect(() => {\n    // check if one field that should be a select value is a string,\n    // if yes all are sourced from strapi and not yet converted\n    if (typeof state.Equidenart === \"string\" && state.Equidenart) {\n      setState(strapiToLocal(state, cms));\n    }\n  }, []);\n\n  // read file\n  useEffect(() => {\n    if (fileInputRef.current?.files?.[0]) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setState((prevState) => ({\n          ...prevState,\n          StellungsanomalienFotos: event.target.result,\n        }));\n      };\n      reader.readAsDataURL(fileInputRef.current.files[0]);\n    }\n  }, [fileInputChange]);\n\n  // saves form\n  function onSubmit(event) {\n    event.preventDefault();\n\n    let findEmptyField = false;\n\n    /* TODO: Redo validation */\n\n    // toggle flag to true if field is missing\n    Object.keys(state).forEach((key) => {\n      const item = state[key];\n      if (\n        item &&\n        ((typeof item === \"object\" && Object.keys(item).length === 0) ||\n          !item) &&\n        !key.endsWith(\"Andere\") &&\n        !key.endsWith(\"Fotos\") &&\n        key !== \"Rasse\" &&\n        key !== \"Beschlagen\"\n      ) {\n        findEmptyField = true;\n      }\n    });\n\n    // check if the additional fields need to be filled out\n    [\n      \"Rasse\",\n      \"Reitweise\",\n      \"Vorerkrankungen\",\n      \"Hufvorerkrankungen\",\n      \"Stellungsanomalien\",\n    ].forEach((p) => {\n      if (\n        !state[p] ||\n        (state[p].index === cms[p].Optionen.strapi_json_value.length - 1 &&\n          !state[p + \"_Andere\"])\n      ) {\n        if (\n          p === \"Rasse\" &&\n          state[\"Rasse\"] &&\n          (state[\"Equidenart\"] === \"Pferd\" || state[\"Equidenart\"] === \"Pony\")\n        ) {\n          findEmptyField = true;\n        } else if (p !== \"Rasse\") {\n          findEmptyField = true;\n        }\n      }\n    });\n\n    if (\n      (!state[\"Rasse\"] &&\n        (state[\"Equidenart\"] === \"Pferd\" || state[\"Equidenart\"] === \"Pony\")) ||\n      state[\"Rasse\"].index ===\n        cms[\"Rasse\"].Optionen.strapi_json_value.length - 1 ||\n      (state[\"Rasse\"].index ===\n        cms[\"Rasse\"].Optionen.strapi_json_value.length - 2 &&\n        !state[\"Rasse\" + \"_Andere\"])\n    ) {\n      findEmptyField = true;\n    }\n\n    if (findEmptyField) {\n      setMessage(cms.Meta.FelderFehlen);\n      messagRef.current.style.display = \"inline\";\n      return;\n    }\n\n    saveFactFileParticularities(localToStrapi(state));\n  }\n\n  return (\n    // Queries for the images used for image select inputs\n    // order is given by the query in the page.\n    // Alternatively, add order fields in strapi and sort here.\n    <FactFileForm onSubmit={onSubmit}>\n      <Logo />\n      {Object.keys(cms).map((key, index) => {\n        if (key === \"Meta\") return;\n        const field = cms[key];\n\n        /*\n          Fields that have special conditions etc.\n          */\n        let showHint;\n        let insertAfterInput;\n\n        /* RASSE */\n        if (key === \"Rasse\") {\n          // display only if pferde or pony is selected\n          if (\n            !(\n              state[\"Equidenart\"]?.value ===\n                cms[\"Equidenart\"]?.Optionen.strapi_json_value[0] ||\n              state[\"Equidenart\"]?.value ===\n                cms[\"Equidenart\"]?.Optionen.strapi_json_value[1]\n            )\n          ) {\n            return;\n          }\n          // if \"Andere\" or \"Rassenmix\" is selected, show another input field\n          if (\n            state[key] &&\n            (state[key].value ===\n              cms[\"Rasse\"].Optionen[cms[\"Rasse\"].Optionen.length - 1] ||\n              state[key].value ===\n                cms[\"Rasse\"].Optionen[cms[\"Rasse\"].Optionen.length - 2])\n          ) {\n            insertAfterInput = (\n              <>\n                <div className={\"insert-field\"}>\n                  <label htmlFor={key + \"additional-field\"}>\n                    {cms.Rasse.Titel_Mischung}\n                  </label>\n                  <TypedInput\n                    id={key + \"additional-field\"}\n                    state={state}\n                    setState={setState}\n                    name={\"Rasse_Andere\"}\n                    value={state[\"Rasse_Andere\"]}\n                    type={\"text\"}\n                  />\n                </div>\n              </>\n            );\n          }\n        }\n\n        /* REITWEISE */\n        if (key === \"Reitweise\") {\n          // if \"Andere\" is selected, show another input field\n          if (\n            state[\"Reitweise\"] &&\n            state[\"Reitweise\"].value ===\n              cms[\"Reitweise\"].Optionen[cms[\"Reitweise\"].Optionen.length - 1]\n          ) {\n            insertAfterInput = (\n              <div className={\"insert-field\"}>\n                <label htmlFor={key + \"additional-field\"}>\n                  {cms.Reitweise.Titel_Andere}\n                </label>\n                <TypedInput\n                  id={key + \"additional-field\"}\n                  state={state}\n                  setState={setState}\n                  name={\"Reitweise_Andere\"}\n                  value={state[\"Reitweise_Andere\"]}\n                  type={\"text\"}\n                />\n              </div>\n            );\n          }\n        }\n\n        /* VORERKRANKUNGEN */\n        // if \"Andere\" is selected, show another input field\n        const optionsV = cms[\"Vorerkrankungen\"].Optionen;\n        if (\n          key === \"Vorerkrankungen\" &&\n          state[\"Vorerkrankungen\"] &&\n          state[\"Vorerkrankungen\"].value === optionsV[optionsV.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Vorerkrankungen.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Vorerkrankungen_Andere\"}\n                value={state[\"Vorerkrankungen_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /* HUFVORERKRANKUNGEN */\n        // if \"Andere\" is selected, show another input field\n        const optionsHV = cms[\"Hufvorerkrankungen\"].Optionen;\n        if (\n          key === \"Hufvorerkrankungen\" &&\n          state[\"Hufvorerkrankungen\"] &&\n          state[\"Hufvorerkrankungen\"].value === optionsHV[optionsHV.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Hufvorerkrankungen.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Hufvorerkrankungen_Andere\"}\n                value={state[\"Hufvorerkrankungen_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /* STELLUNGSANOMALIEN */\n        const optionsSA = cms[\"Stellungsanomalien\"].Optionen;\n        if (\n          key === \"Stellungsanomalien\" &&\n          state[\"Stellungsanomalien\"] &&\n          state[\"Stellungsanomalien\"].value === optionsSA[optionsSA.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Stellungsanomalien.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Stellungsanomalien_Andere\"}\n                value={state[\"Stellungsanomalien_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /*\n          Automatic generation for default fields\n           */\n        return (\n          <InputGroup\n            title={field.Titel}\n            subtext={field.Subtext}\n            help={field.Hilfstext}\n            hint={field.Hinweis}\n            showHint={showHint}\n            key={\"input-group\" + index}\n          >\n            <TypedInput\n              state={state}\n              setState={setState}\n              name={key}\n              value={state[key]}\n              options={field.Optionen}\n              type={field.Typ?.toLowerCase() || \"select\"}\n              images={[\n                field.Bild1?.localFile,\n                field.Bild2?.localFile,\n                field.Bild3?.localFile,\n              ]}\n            />\n            {insertAfterInput}\n          </InputGroup>\n        );\n      })}\n\n      <div className={\"bottom-row\"}>\n        <span className={\"fill-out\"} ref={messagRef}>\n          {message}\n        </span>\n        <Button className={\"primary save-button\"}>{cms.Meta.Speichern}</Button>\n      </div>\n    </FactFileForm>\n  );\n}\n","import {\n  useHorseQuery,\n  useUpdateHorseMutation,\n} from \"../../../../redux/api/horseApi\";\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../../redux/store\";\nimport routes from \"../../../../constants/routes\";\nimport { navigate } from \"gatsby\";\nimport FactFileParticularitiesForm, {\n  f2initial,\n} from \"./FactFileParticularitiesForm\";\nimport { Alert } from \"@mui/material\";\nimport { strapiToLocal } from \"../../../../services/upload/factFileParticularities/parseFactFileParticularities\";\n\ntype FactFileParticularitiesDataProps = {\n  cms: any;\n  horseId: string;\n};\n\nexport const FactFileParticularitiesData = ({\n  horseId,\n  cms,\n}: FactFileParticularitiesDataProps) => {\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  const { data: horseData, isLoading } = useHorseQuery(\n    { userId: user?.id as string, horseId: horseId },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: !horseId,\n    }\n  );\n\n  const [updateHorse, updateHorseResult] = useUpdateHorseMutation();\n\n  const saveFactFileParticularities = async (factFileParticularities: any) => {\n    const horsePatch = {\n      factFileParticularities: {\n        equineType: factFileParticularities.Equidenart,\n        race: factFileParticularities.Rasse,\n        raceOthers: factFileParticularities.Rasse_Andere,\n        ridingStyle: factFileParticularities.Reitweise,\n        weeklyRidingTime: factFileParticularities.Nutzungszeit,\n        hoofPreconditions: factFileParticularities.Hufvorerkrankungen,\n        hoofPreconditionsOther:\n          factFileParticularities.Hufvorerkrankungen_Andere,\n        positionAnomalies: factFileParticularities.Stellungsanomalien,\n        positionAnomaliesOther:\n          factFileParticularities.Stellungsanomalien_Andere,\n        preconditions: factFileParticularities.Vorerkrankungen,\n        preconditionsOther: factFileParticularities.Vorerkrankungen_Andere,\n      },\n    };\n\n    await updateHorse({\n      userId: user?.id,\n      horseId: horseId,\n      data: horsePatch,\n    });\n  };\n\n  useEffect(() => {\n    if (updateHorseResult.isSuccess) {\n      navigate(routes.detailView(horseId));\n    }\n  }, [updateHorseResult]);\n\n  if (isLoading || updateHorseResult.isLoading) {\n    return <span>Lädt..</span>;\n  }\n\n  if (updateHorseResult.error) {\n    return <Alert severity={\"error\"}>Fehler beim Speichern</Alert>;\n  }\n\n  return (\n    <FactFileParticularitiesForm\n      cms={cms}\n      saveFactFileParticularities={async (factFileParticularities: any) => {\n        await saveFactFileParticularities(factFileParticularities);\n      }}\n      horse={horseData}\n      initialState={\n        horseData.factFileParticularities\n          ? strapiToLocal(horseData.factFileParticularities, cms)\n          : // {\n            //   Equidenart: findOption(\n            //     cms.Equidenart.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.equineType\n            //   ),\n            //   Rasse: findOption(\n            //     cms.Rasse.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.race\n            //   ),\n            //   Rasse_Andere: horseData.factFileParticularities.raceOthers,\n            //   Reitweise: findOption(\n            //     cms.Reitweise.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.ridingStyle\n            //   ),\n            //   Nutzungszeit: findOption(\n            //     cms.Nutzungszeit.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.weeklyRidingTime\n            //   ),\n            //   Beschlagen: horseData.factFileParticularities.hasHorseShoe,\n            //   Vorerkrankungen: findOption(\n            //     cms.Vorerkrankungen.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.preconditions\n            //   ),\n            //   Vorerkrankungen_Andere:\n            //     horseData.factFileParticularities.preconditionsOther,\n            //   Hufvorerkrankungen: findOption(\n            //     cms.Hufvorerkrankungen.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.hoofPreconditions\n            //   ),\n            //   Hufvorerkrankungen_Andere:\n            //     horseData.factFileParticularities.hoofPreconditionsOther,\n            //   Stellungsanomalien: findOption(\n            //     cms.Stellungsanomalien.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.positionAnomalies\n            //   ),\n            //   Stellungsanomalien_Andere:\n            //     horseData.factFileParticularities.positionAnomaliesOther,\n            // }\n            f2initial\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport AppLayout from \"../../../components/App/Layout\";\nimport { Particularities } from \"../../../components/App/FactFile/Particularities\";\nimport { General } from \"../../../components/App/FactFile/General\";\nimport routes from \"../../../constants/routes\";\nimport { FactFileParticularitiesData } from \"../../../components/App/FactFile/Particularities/FactFileParticularitiesData\";\nimport { classNames } from \"react-select/dist/declarations/src/utils\";\n\nexport default function FactFileParticularitiesPage(props: any) {\n  const { data, location, id: horseId } = props;\n\n  return (\n    <AppLayout\n      title={\"Besonderheiten\"}\n      subtitleKey={\"name\"}\n      horseId={horseId}\n      showNavigation={true}\n      lastRoute={routes.detailView(horseId)}\n      location={location}\n    >\n      <FactFileParticularitiesData\n        cms={data[\"strapiSteckbriefBesonderheiten\"]}\n        horseId={horseId}\n      />\n    </AppLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    strapiSteckbriefBesonderheiten {\n      Meta {\n        Titel\n        Speichern\n        FelderFehlen\n      }\n      Equidenart {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n      }\n      Rasse {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Mischung\n        Subtext\n      }\n      Reitweise {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n        Titel_Andere\n      }\n      Nutzungszeit {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n      }\n      Beschlagen {\n        Titel\n        Hilfstext\n        Typ\n      }\n      Vorerkrankungen {\n        Titel\n        Hilfstext\n        Subtext\n        Optionen {\n          id\n          strapi_json_value\n        }\n      }\n      Hufvorerkrankungen {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Andere\n        Subtext\n      }\n      Stellungsanomalien {\n        Subtext\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Andere\n        Hinweis\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst LogoWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function Logo() {\n  return (\n    <StaticQuery\n      query={graphql`\n        {\n          logoBig: file(relativePath: { eq: \"logoBig.png\" }) {\n            childImageSharp {\n              gatsbyImageData(width: 400, layout: CONSTRAINED)\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <LogoWrapper>\n          <GatsbyImage\n            image={data.logoBig.childImageSharp.gatsbyImageData}\n            alt={\"Equilandoo Logo\"}\n          />\n        </LogoWrapper>\n      )}\n    />\n  );\n}\n"],"names":["fieldMapping","Equidenart","Rasse","Rasse_Andere","Reitweise","Nutzungszeit","Beschlagen","Vorerkrankungen","Vorerkrankungen_Andere","Hufvorerkrankungen","Hufvorerkrankungen_Andere","Stellungsanomalien","Stellungsanomalien_Andere","strapiToLocal","state","cms","restState","convertedFields","forEach","key","findOption","Optionen","strapi_json_value","Object","assign","f2initial","Reitweise_Andere","FactFileParticularitiesForm","initialState","saveFactFileParticularities","setState","useState","messagRef","useRef","message","setMessage","fileInputRef","fileInputChange","useEffect","current","files","reader","FileReader","onload","event","prevState","StellungsanomalienFotos","target","result","readAsDataURL","onSubmit","preventDefault","findEmptyField","keys","item","length","endsWith","p","index","Meta","FelderFehlen","style","display","value","localToStrapi","Logo","map","field","insertAfterInput","className","htmlFor","Titel_Mischung","TypedInput","id","name","type","Titel_Andere","optionsV","optionsHV","optionsSA","title","Titel","subtext","Subtext","help","Hilfstext","hint","Hinweis","showHint","options","Typ","toLowerCase","images","Bild1","localFile","Bild2","Bild3","ref","Button","Speichern","FactFileParticularitiesData","_ref","horseId","user","useSelector","auth","data","horseData","isLoading","useHorseQuery","userId","refetchOnMountOrArgChange","skip","updateHorse","updateHorseResult","useUpdateHorseMutation","isSuccess","navigate","routes","React","error","Alert","severity","async","horsePatch","factFileParticularities","equineType","race","raceOthers","ridingStyle","weeklyRidingTime","hoofPreconditions","hoofPreconditionsOther","positionAnomalies","positionAnomaliesOther","preconditions","preconditionsOther","horse","FactFileParticularitiesPage","props","location","AppLayout","subtitleKey","showNavigation","lastRoute","LogoWrapper","styled","StaticQuery","query","render","G","image","logoBig","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}