{"version":3,"file":"component---src-pages-pferde-[id]-allgemeines-tsx-d84df64a9a7db292c9ba.js","mappings":"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","sources":["webpack://equilandoo-app/./src/components/App/FactFile/General/ConfirmText.js","webpack://equilandoo-app/./src/components/App/FactFile/General/FactFileGeneralForm.js","webpack://equilandoo-app/./src/components/App/FactFile/General/FactFileGeneralData.tsx","webpack://equilandoo-app/./src/pages/pferde/[id]/allgemeines.tsx","webpack://equilandoo-app/./src/components/App/Misc/Logo.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { spacing } from \"../../../../constants/spacing\";\nimport { Button } from \"../../Misc/Button\";\n\nconst ConfirmTextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: ${spacing.spaceXs} 0;\n\n  p {\n    margin: 0 0 ${spacing.spaceSm};\n    text-align: center;\n  }\n\n  .checkbox-row {\n    display: flex;\n    flex-direction: row;\n\n    align-items: center;\n  }\n\n  input {\n    width: ${spacing.spaceLg};\n    height: ${spacing.spaceLg};\n    margin: 0 ${spacing.spaceXs} 0 0;\n  }\n\n  label {\n    margin: 0;\n  }\n\n  button {\n    align-self: center;\n    margin: ${spacing.spaceXs} 0 !important;\n  }\n`;\n\nexport default function ConfirmText({\n  text,\n  buttonText,\n  value,\n  onChange,\n  name,\n  checkboxText,\n  link,\n}) {\n  return (\n    <ConfirmTextWrapper>\n      <p>{text}</p>\n      <div className={\"checkbox-row\"}>\n        <input\n          id={\"confirm-text-checkbox\"}\n          type={\"checkbox\"}\n          onChange={(event) => onChange(event)}\n          checked={value}\n          name={name}\n        />\n        <label htmlFor={\"confirm-text-checkbox\"}>{checkboxText}</label>\n      </div>\n      <Button className={\"secondary\"} target={\"_blank\"} href={link}>\n        {buttonText}\n      </Button>\n    </ConfirmTextWrapper>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { FactFileForm } from \"../styled\";\nimport { Button } from \"../../Misc/Button\";\nimport { InputGroup, TypedInput } from \"../TypedInput\";\nimport routes from \"../../../../constants/routes\";\nimport ConfirmText from \"./ConfirmText\";\nimport Logo from \"../../Misc/Logo\";\n\nexport const f1initial = {\n  Geburtsjahr: \"\",\n  Groesse: \"\",\n  Gewicht: \"\",\n  Letzte_Hufbearbeitung: \"\",\n  Letzte_Hufschuhe: {},\n  Letzte_Hufschuhe_selected: [],\n  Terrain: \"\",\n  Terrain_Andere: \"\",\n  Hufform: \"\",\n  Hufbearbeitung_Gelesen: false,\n};\n\nexport default function FactFileGeneralForm({\n  cms,\n  saveFactFileGeneral,\n  horse,\n  cmsMisc,\n  initialState,\n}) {\n  // manages input vales, gets send to strapi\n  const [state, setState] = useState(initialState || f1initial);\n  // this element shows a message that all fields need to be filled out\n  const messagRef = useRef();\n  const [message, setMessage] = useState(\"\");\n\n  // saves form\n  function onSubmit(event) {\n    event.preventDefault();\n\n    let findEmptyField = false;\n    // check if all fields are filled out\n    const excluded = [\n      \"Letzte_Hufschuhe\",\n      \"Letzte_Hufschuhe_selected\",\n      \"Hufschuhe_Fuer\",\n      \"Stellungsfehler\",\n      \"Terrain_Andere\",\n    ];\n    Object.keys(state).forEach((key) => {\n      const item = state[key];\n      if (\n        !item &&\n        ((typeof item === \"object\" && Object.keys(item).length === 0) ||\n          !item) &&\n        !key.endsWith(\"Andere\") &&\n        !excluded.includes(key)\n      ) {\n        findEmptyField = true;\n      }\n      if (key === \"Letzte_Hufschuhe\") {\n        // TODO\n        // Object.keys(item).map((key) => {\n        //   const shoe = item[key];\n        //   if (!shoe.rating) findEmptyField = true;\n        // });\n      }\n    });\n\n    if (findEmptyField) {\n      setMessage(cms.Meta.FelderFehlen);\n\n      messagRef.current.style.display = \"inline\";\n      return;\n    }\n\n    saveFactFileGeneral(horse.id, state);\n  }\n\n  return (\n    // Queries for the images used for image select inputs\n    // order is given by the query in the page.\n    // Alternatively, add order fields in strapi and sort here.\n    <FactFileForm onSubmit={onSubmit}>\n      <Logo />\n      {Object.keys(cms).map((key, index) => {\n        if (\n          key === \"Meta\" ||\n          key === \"Hufschuhe_Fuer\" ||\n          key === \"Stellungsfehler\"\n        )\n          return;\n        const field = cms[key];\n\n        /*\n             Fields that have special conditions etc.\n             */\n        let showHint;\n        let insertAfterInput;\n\n        if (key === \"Letzte_Hufbearbeitung\") {\n          // if last option is selected (>30 days)\n          if (\n            state.Letzte_Hufbearbeitung ===\n            field.Optionen.strapi_json_value[field.Optionen.length - 1]\n          ) {\n            showHint = true;\n          }\n          insertAfterInput = (\n            <ConfirmText\n              text={field.Erklaerung}\n              checkboxText={field.Gelesen}\n              buttonText={field.InfoButton}\n              link={routes.padsInformation}\n              value={state.Hufbearbeitung_Gelesen}\n              onChange={(event) => {\n                event.persist();\n                setState((prev) => ({\n                  ...prev,\n                  Hufbearbeitung_Gelesen: event.target.checked,\n                }));\n              }}\n            />\n          );\n        }\n\n        /* Terrain */\n        // if \"Andere\" is selected, show another input field\n        const optionsHV = cms[\"Terrain\"].Optionen;\n        if (\n          key === \"Terrain\" &&\n          state[\"Terrain\"].value === optionsHV[optionsHV.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Terrain.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Terrain_Andere\"}\n                value={state[\"Terrain_Andere\"]}\n                type={\"text\"}\n              />\n            </div>\n          );\n        }\n\n        /*\n            Automatic Generation for fields with no special instructions etc.\n             */\n\n        return (\n          <InputGroup\n            title={field.Titel}\n            subtext={field.Subtext}\n            help={field.Hilfstext}\n            hint={field.Hinweis}\n            showHint={showHint}\n            key={\"input-group\" + index}\n            insertAfterInput={insertAfterInput}\n          >\n            <TypedInput\n              state={state}\n              value={state[key]}\n              setState={setState}\n              name={key}\n              options={field.Optionen}\n              type={field.Typ?.toLowerCase() || \"select\"}\n              images={[\n                field.Bild1?.localFile,\n                field.Bild2?.localFile,\n                field.Bild3?.localFile,\n              ]}\n              showRanking={\n                state.Letzte_Hufschuhe &&\n                !!Object.keys(state.Letzte_Hufschuhe)?.length\n              }\n              starSelectTitle={cmsMisc.StarSelectTitle}\n            />\n          </InputGroup>\n        );\n      })}\n\n      <div className={\"bottom-row\"}>\n        <span className={\"fill-out\"} ref={messagRef}>\n          {message}\n        </span>\n        <Button className={\"primary save-button\"}>{cms.Meta.Speichern}</Button>\n      </div>\n    </FactFileForm>\n  );\n}\n","import FactFileGeneralForm, { f1initial } from \"./FactFileGeneralForm\";\nimport {\n  useGetHorseQuery,\n  useUpdateHorseMutation,\n} from \"../../../../redux/api/horseApi\";\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../../redux/store\";\nimport {\n  FactFileGeneral,\n  FactFileParticularities,\n} from \"../../../../redux/types\";\nimport routes from \"../../../../constants/routes\";\nimport { navigate } from \"gatsby\";\nimport colors from \"../../../../constants/colors\";\nimport { findOption } from \"../../Misc/strapiArrayToOptions\";\n\ntype FactFileGeneralDataProps = {\n  cms: any;\n  cmsMisc: any;\n  horseId: string;\n};\n\nexport const FactFileGeneralData = ({\n  horseId,\n  cms,\n  cmsMisc,\n}: FactFileGeneralDataProps) => {\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  const { data: horseData, isLoading } = useGetHorseQuery(\n    { userId: user?.id as string, horseId: horseId },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: !horseId,\n    }\n  );\n\n  const [updateHorse, { isLoading: isUpdateMutationLoading }] =\n    useUpdateHorseMutation();\n\n  const saveFactFileGeneral = async (factFileGeneral: any) => {\n    const horsePatch = {\n      factFileGeneral: {\n        yearOfBirth: factFileGeneral.Geburtsjahr,\n        height: factFileGeneral.Groesse,\n        weight: factFileGeneral.Gewicht,\n        lastHoofBoots: factFileGeneral.Letzte_Hufschuhe,\n        hoofShape: factFileGeneral.Hufform,\n        lastHoofTrimming: factFileGeneral.Letzte_Hufbearbeitung.value,\n        confirmedHoofTrimmingNote: factFileGeneral.Hufbearbeitung_Gelesen,\n        terrain: factFileGeneral.Terrain.value,\n        terrainOther: factFileGeneral.Terrain_Andere,\n      },\n    };\n\n    await updateHorse({\n      userId: user?.id,\n      horseId: horseId,\n      data: horsePatch,\n    });\n\n    await navigate(routes.detailView(horseId));\n  };\n\n  if (isLoading) {\n    return <span>Lädt..</span>;\n  }\n\n  return (\n    <FactFileGeneralForm\n      cms={cms}\n      cmsMisc={cmsMisc}\n      saveFactFileGeneral={(id: string, factFileGeneral: any) => {\n        saveFactFileGeneral(factFileGeneral);\n      }}\n      horse={horseData}\n      initialState={\n        horseData.factFileGeneral\n          ? {\n              Geburtsjahr: horseData.factFileGeneral.yearOfBirth,\n              Groesse: horseData.factFileGeneral.height,\n              Gewicht: horseData.factFileGeneral.weight,\n              Letzte_Hufschuhe: horseData.factFileGeneral.lastHoofBoots,\n              Hufform: horseData.factFileGeneral.hoofShape,\n              Letzte_Hufbearbeitung: findOption(\n                cms.Letzte_Hufbearbeitung.Optionen.strapi_json_value,\n                horseData.factFileGeneral.lastHoofTrimming\n              ),\n              Terrain: findOption(\n                cms.Terrain.Optionen.strapi_json_value,\n                horseData.factFileGeneral.terrain\n              ),\n              Terrain_Andere: horseData.factFileGeneral.terrainOther,\n              Hufbearbeitung_Gelesen:\n                horseData.factFileGeneral.confirmedHoofTrimmingNote,\n              Letzte_Hufschuhe_selected: Object.keys(\n                horseData.factFileGeneral.lastHoofBoots\n              ).map((bootKey) =>\n                findOption(\n                  cms.Letzte_Hufschuhe.Optionen.strapi_json_value,\n                  horseData.factFileGeneral.lastHoofBoots[bootKey].name\n                )\n              ),\n            }\n          : f1initial\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport AppLayout from \"../../../components/App/Layout\";\nimport routes from \"../../../constants/routes\";\nimport { FactFileGeneralData } from \"../../../components/App/FactFile/General/FactFileGeneralData\";\nimport { useGetHorseQuery } from \"../../../redux/api/horseApi\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../redux/store\";\n\nexport default function FactFileGeneralPage(props: any) {\n  const { data, location, id: horseId } = props;\n\n  return (\n    <AppLayout\n      title={\"Allgemeines\"}\n      horseId={horseId}\n      subtitleKey={\"name\"}\n      showNavigation={true}\n      location={location}\n      lastRoute={routes.detailView(horseId)}\n    >\n      <FactFileGeneralData\n        cms={data[\"strapiSteckbriefAllgemeines\"]}\n        cmsMisc={data[\"strapiMisc\"]}\n        horseId={horseId}\n      />\n    </AppLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  {\n    strapiMisc {\n      StarSelectTitle\n    }\n    strapiSteckbriefAllgemeines {\n      Meta {\n        Titel\n        Speichern\n        FelderFehlen\n      }\n      Geburtsjahr {\n        Titel\n        Hilfstext\n        Typ\n        Subtext\n      }\n      Groesse {\n        Titel\n        Hilfstext\n        Typ\n        Subtext\n      }\n      Gewicht {\n        Titel\n        Hilfstext\n        Typ\n        Subtext\n      }\n      Letzte_Hufbearbeitung {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Hinweis\n        Erklaerung\n        Gelesen\n        InfoButton\n        Subtext\n      }\n      Letzte_Hufschuhe {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n      }\n      Terrain {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n        Titel_Andere\n      }\n      Hufform {\n        Titel\n        Hilfstext\n        Typ\n        Subtext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Bild1 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 128)\n            }\n          }\n        }\n        Bild2 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 128)\n            }\n          }\n        }\n        Bild3 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 128)\n            }\n          }\n        }\n      }\n      Hufschuhe_Fuer {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Bild1 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 64, layout: CONSTRAINED)\n            }\n          }\n        }\n        Bild2 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 64, layout: CONSTRAINED)\n            }\n          }\n        }\n        Bild3 {\n          localFile {\n            childImageSharp {\n              gatsbyImageData(width: 64, layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst LogoWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function Logo() {\n  return (\n    <StaticQuery\n      query={graphql`\n        {\n          logoBig: file(relativePath: { eq: \"logoBig.png\" }) {\n            childImageSharp {\n              gatsbyImageData(width: 400, layout: CONSTRAINED)\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <LogoWrapper>\n          <GatsbyImage\n            image={data.logoBig.childImageSharp.gatsbyImageData}\n            alt={\"Equilandoo Logo\"}\n          />\n        </LogoWrapper>\n      )}\n    />\n  );\n}\n"],"names":["ConfirmTextWrapper","styled","spacing","ConfirmText","text","buttonText","value","onChange","name","checkboxText","link","className","id","type","event","checked","htmlFor","Button","target","href","f1initial","Geburtsjahr","Groesse","Gewicht","Letzte_Hufbearbeitung","Letzte_Hufschuhe","Letzte_Hufschuhe_selected","Terrain","Terrain_Andere","Hufform","Hufbearbeitung_Gelesen","FactFileGeneralForm","cms","saveFactFileGeneral","horse","cmsMisc","initialState","useState","state","setState","messagRef","useRef","message","setMessage","onSubmit","preventDefault","findEmptyField","excluded","Object","keys","forEach","key","item","length","endsWith","includes","Meta","FelderFehlen","current","style","display","Logo","map","index","showHint","insertAfterInput","field","Optionen","strapi_json_value","Erklaerung","Gelesen","InfoButton","routes","persist","prev","optionsHV","Titel_Andere","TypedInput","title","Titel","subtext","Subtext","help","Hilfstext","hint","Hinweis","options","Typ","toLowerCase","images","Bild1","localFile","Bild2","Bild3","showRanking","starSelectTitle","StarSelectTitle","ref","Speichern","FactFileGeneralData","horseId","user","useSelector","auth","useGetHorseQuery","userId","refetchOnMountOrArgChange","skip","horseData","data","isLoading","useUpdateHorseMutation","updateHorse","factFileGeneral","_context","horsePatch","yearOfBirth","height","weight","lastHoofBoots","hoofShape","lastHoofTrimming","confirmedHoofTrimmingNote","terrain","terrainOther","navigate","React","findOption","bootKey","FactFileGeneralPage","props","location","AppLayout","subtitleKey","showNavigation","lastRoute","LogoWrapper","StaticQuery","query","render","G","image","logoBig","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}