{"version":3,"file":"component---src-pages-pferde-[id]-besonderheiten-tsx-e3d9237475ba2d2c1451.js","mappings":"qkBAEMA,EAAe,CACnBC,WAAY,aACZC,MAAO,OACPC,aAAc,aACdC,UAAW,cACXC,aAAc,mBACdC,WAAY,eACZC,gBAAiB,gBACjBC,uBAAwB,qBACxBC,mBAAoB,oBACpBC,0BAA2B,yBAC3BC,mBAAoB,oBACpBC,0BAA2B,0BAkCtB,SAASC,EAAcC,EAAOC,GAW/BD,EARFb,WAQEa,EAPFV,UAOEU,EANFP,gBAMEO,EALFT,aAKES,EAJFZ,MAIEY,EAHFL,mBAGEK,EAFFH,mBAPF,IAQKK,GARL,OASIF,EATJ,GAWMG,EAAkB,CAAC,EAkBzB,MAjBkB,CAChB,aACA,YACA,kBACA,eACA,QACA,qBACA,sBAGQC,SAAQ,SAACC,GACjBF,EAAgBE,IAAOC,EAAAA,EAAAA,GACrBL,EAAII,GAAKE,SAASC,kBAClBR,EAAMd,EAAamB,IAEtB,IAEMI,OAAOC,OAAOR,EAAWC,EACjC,C,cC5DYQ,EAAY,CACvBxB,WAAY,GACZC,MAAO,GACPC,aAAc,GACdC,UAAW,GACXsB,iBAAkB,GAClBrB,aAAc,GACdC,YAAY,EACZC,gBAAiB,GACjBC,uBAAwB,GACxBC,mBAAoB,GACpBC,0BAA2B,GAC3BC,mBAAoB,GACpBC,0BAA2B,IAGd,SAASe,EAAT,GAKX,IAJFZ,EAIC,EAJDA,IAEAa,GAEC,EAHDC,MAGC,EAFDD,cACAE,EACC,EADDA,4BAEA,GAA0BC,EAAAA,EAAAA,UAASH,GAAgBH,GAA5CX,EAAP,KAAckB,EAAd,KAEMC,GAAYC,EAAAA,EAAAA,UAClB,GAA8BH,EAAAA,EAAAA,UAAS,IAAhCI,EAAP,KAAgBC,EAAhB,KACMC,GAAeH,EAAAA,EAAAA,UACrB,GAA8CH,EAAAA,EAAAA,WAAS,GAAhDO,EAAP,UA4FA,OA1FAC,QAAQC,IAAI1B,EAAOC,IAGnB0B,EAAAA,EAAAA,YAAU,WACRF,QAAQC,IAAI1B,GAGoB,iBAArBA,EAAMb,YAA2Ba,EAAMb,aAChDsC,QAAQC,IAAI,iBACZR,EAASnB,EAAcC,EAAOC,KAEhCwB,QAAQC,IAAI1B,EACb,GAAE,KAGH2B,EAAAA,EAAAA,YAAU,WAAO,IAAD,IACd,aAAIJ,EAAaK,eAAjB,iBAAI,EAAsBC,aAA1B,OAAI,EAA8B,GAAI,CACpC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACff,GAAS,SAACgB,GAAD,wBACJA,EADI,CAEPC,wBAAyBF,EAAMG,OAAOC,QAF/B,GAIV,EACDP,EAAOQ,cAAcf,EAAaK,QAAQC,MAAM,GACjD,CACF,GAAE,CAACL,IAoEF,gBAAC,IAAD,CAAce,SAjEhB,SAAkBN,GAChBA,EAAMO,iBAEN,IAAIC,GAAiB,EAiDrB,GA/CAhB,QAAQC,IAAI1B,GAGZS,OAAOiC,KAAK1C,GAAOI,SAAQ,SAACC,GAC1B,IAAMsC,EAAO3C,EAAMK,IAEjBsC,IACkB,iBAATA,GAAkD,IAA7BlC,OAAOiC,KAAKC,GAAMC,SAC7CD,GACFtC,EAAIwC,SAAS,WACbxC,EAAIwC,SAAS,UACN,UAARxC,GACQ,eAARA,IAEAoB,QAAQC,IAAI,aAEZe,GAAiB,EAEpB,IAGD,CACE,QACA,YACA,kBACA,qBACA,sBACArC,SAAQ,SAAC0C,GAEN9C,EAAM8C,KACN9C,EAAM8C,GAAGC,QAAU9C,EAAI6C,GAAGvC,SAASqC,OAAS,GAAM5C,EAAM8C,EAAI,cAE7DrB,QAAQC,IAAI,aACZe,GAAiB,EAEpB,IAGEzC,EAAK,OACNA,EAAK,MAAU+C,QAAU9C,EAAG,MAAUM,SAASqC,OAAS,IACvD5C,EAAK,MAAU+C,QAAU9C,EAAG,MAAUM,SAASqC,OAAS,GACtD5C,EAAK,gBAERyB,QAAQC,IAAI,iBACZe,GAAiB,GAGfA,EAGF,OAFAnB,EAAWrB,EAAI+C,KAAKC,mBACpB9B,EAAUS,QAAQsB,MAAMC,QAAU,UAIpCnC,EDvHG,SAAuBhB,GAWxBA,EARFb,WAQEa,EAPFV,UAOEU,EANFP,gBAMEO,EALFT,aAKES,EAJFZ,MAIEY,EAHFL,mBAGEK,EAFFH,mBAPF,IAQKK,GARL,OASIF,EATJ,GAWMG,EAAkB,CAAC,EAezB,MAdkB,CAChB,aACA,YACA,kBACA,eACA,QACA,qBACA,sBAGQC,SAAQ,SAACC,GACjBF,EAAgBE,GAAOL,EAAMK,GAAK+C,KACnC,IAEM3C,OAAOC,OAAOR,EAAWC,EACjC,CC0F+BkD,CAAcrD,GAC3C,GAOG,gBAACsD,EAAA,EAAD,MACC7C,OAAOiC,KAAKzC,GAAKsD,KAAI,SAAClD,EAAK0C,GAAW,IAAD,QACpC,GAAY,SAAR1C,EAAJ,CACA,IAMImD,EANEC,EAAQxD,EAAII,GASlB,GAAY,UAARA,EAAiB,CAEnB,GAEIL,EAAK,WAAeoD,QAClBnD,EAAG,WAAeM,SAASC,kBAAkB,IAC/CR,EAAK,WAAeoD,QAClBnD,EAAG,WAAeM,SAASC,kBAAkB,GAGjD,QAIAR,EAAMK,IACLL,EAAMK,GAAK+C,QACVnD,EAAG,MAAUM,SAASN,EAAG,MAAUM,SAASqC,OAAS,IACrD5C,EAAMK,GAAK+C,QACTnD,EAAG,MAAUM,SAASN,EAAG,MAAUM,SAASqC,OAAS,KAEzDY,EACE,gCACE,uBAAKE,UAAW,gBACd,yBAAOC,QAAStD,EAAM,oBACnBJ,EAAIb,MAAMwE,gBAEb,gBAACC,EAAA,EAAD,CACEC,GAAIzD,EAAM,mBACVL,MAAOA,EACPkB,SAAUA,EACV6C,KAAM,eACNX,MAAOpD,EAAK,aACZgE,KAAM,WAMjB,CAGW,cAAR3D,GAGAL,EAAK,WACLA,EAAK,UAAcoD,QACjBnD,EAAG,UAAcM,SAASN,EAAG,UAAcM,SAASqC,OAAS,KAE/DY,EACE,uBAAKE,UAAW,gBACd,yBAAOC,QAAStD,EAAM,oBACnBJ,EAAIX,UAAU2E,cAEjB,gBAACJ,EAAA,EAAD,CACEC,GAAIzD,EAAM,mBACVL,MAAOA,EACPkB,SAAUA,EACV6C,KAAM,mBACNX,MAAOpD,EAAK,iBACZgE,KAAM,WAShB,IAAME,EAAWjE,EAAG,gBAAoBM,SAE9B,oBAARF,GACAL,EAAK,iBACLA,EAAK,gBAAoBoD,QAAUc,EAASA,EAAStB,OAAS,KAE9DY,EACE,uBAAKE,UAAW,gBACd,yBAAOC,QAAStD,EAAM,oBACnBJ,EAAIR,gBAAgBwE,cAEvB,gBAACJ,EAAA,EAAD,CACEC,GAAIzD,EAAM,mBACVL,MAAOA,EACPkB,SAAUA,EACV6C,KAAM,yBACNX,MAAOpD,EAAK,uBACZgE,KAAM,eAQd,IAAMG,EAAYlE,EAAG,mBAAuBM,SAElC,uBAARF,GACAL,EAAK,oBACLA,EAAK,mBAAuBoD,QAAUe,EAAUA,EAAUvB,OAAS,KAEnEY,EACE,uBAAKE,UAAW,gBACd,yBAAOC,QAAStD,EAAM,oBACnBJ,EAAIN,mBAAmBsE,cAE1B,gBAACJ,EAAA,EAAD,CACEC,GAAIzD,EAAM,mBACVL,MAAOA,EACPkB,SAAUA,EACV6C,KAAM,4BACNX,MAAOpD,EAAK,0BACZgE,KAAM,eAOd,IAAMI,EAAYnE,EAAG,mBAAuBM,SA0B5C,MAxBU,uBAARF,GACAL,EAAK,oBACLA,EAAK,mBAAuBoD,QAAUgB,EAAUA,EAAUxB,OAAS,KAEnEY,EACE,uBAAKE,UAAW,gBACd,yBAAOC,QAAStD,EAAM,oBACnBJ,EAAIJ,mBAAmBoE,cAE1B,gBAACJ,EAAA,EAAD,CACEC,GAAIzD,EAAM,mBACVL,MAAOA,EACPkB,SAAUA,EACV6C,KAAM,4BACNX,MAAOpD,EAAK,0BACZgE,KAAM,eAUZ,gBAAC,IAAD,CACEK,MAAOZ,EAAMa,MACbC,QAASd,EAAMe,QACfC,KAAMhB,EAAMiB,UACZC,KAAMlB,EAAMmB,QACZC,SAzJAA,UA0JAxE,IAAK,cAAgB0C,GAErB,gBAACc,EAAA,EAAD,CACE7D,MAAOA,EACPkB,SAAUA,EACV6C,KAAM1D,EACN+C,MAAOpD,EAAMK,GACbyE,QAASrB,EAAMlD,SACfyD,MAAM,UAAAP,EAAMsB,WAAN,eAAWC,gBAAiB,SAClCC,OAAQ,WACNxB,EAAMyB,aADA,aACN,EAAaC,UADP,UAEN1B,EAAM2B,aAFA,aAEN,EAAaD,UAFP,UAGN1B,EAAM4B,aAHA,aAGN,EAAaF,aAGhB3B,EA/KqB,CAkL3B,IAED,uBAAKE,UAAW,cACd,wBAAMA,UAAW,WAAY4B,IAAKnE,GAC/BE,GAEH,gBAACkE,EAAA,EAAD,CAAQ7B,UAAW,uBAAwBzD,EAAI+C,KAAKwC,YAI3D,C,cC1TYC,EAA8B,SAAC,GAGH,IAFvCC,EAEsC,EAFtCA,QACAzF,EACsC,EADtCA,IAEM0F,GAAOC,EAAAA,EAAAA,KAAY,SAAC5F,GAAD,OAAsBA,EAAM6F,KAAKF,IAAlC,IAExB,GAAuCG,EAAAA,EAAAA,IACrC,CAAEC,OAAQJ,aAAF,EAAEA,EAAM7B,GAAc4B,QAASA,GACvC,CACEM,2BAA2B,EAC3BC,MAAOP,IAJGQ,EAAd,EAAQC,KAAiBC,EAAzB,EAAyBA,UAQzB,GAAyCC,EAAAA,EAAAA,MAAlCC,EAAP,KAAoBC,EAApB,KAEMvF,EAA2B,mCAAG,WAAOwF,GAAP,uEAAAC,OAC5BC,EAAa,CACjBF,wBAAyB,CACvBG,WAAYH,EAAwBrH,WACpCyH,KAAMJ,EAAwBpH,MAC9ByH,WAAYL,EAAwBnH,aACpCyH,YAAaN,EAAwBlH,UACrCyH,iBAAkBP,EAAwBjH,aAC1CyH,kBAAmBR,EAAwB7G,mBAC3CsH,uBACET,EAAwB5G,0BAC1BsH,kBAAmBV,EAAwB3G,mBAC3CsH,uBACEX,EAAwB1G,0BAC1BsH,cAAeZ,EAAwB/G,gBACvC4H,mBAAoBb,EAAwB9G,yBAfd+G,EAAAA,KAAAA,EAmB5BH,EAAY,CAChBP,OAAQJ,aAAF,EAAEA,EAAM7B,GACd4B,QAASA,EACTS,KAAMO,IAtB0B,sCAAH,2DAgCjC,OANA/E,EAAAA,EAAAA,YAAU,WACJ4E,EAAkBe,YACpBC,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,WAAkB9B,GAFtB,GAIN,CAACa,IAEAH,GAAaG,EAAkBH,UAC1BqB,EAAAA,cAAAA,OAAAA,KAAAA,UAGLlB,EAAkBmB,MACbD,EAAAA,cAACE,EAAAA,EAAD,CAAOC,SAAU,SAAjB,yBAIPH,EAAAA,cAAC5G,EAAD,CACEZ,IAAKA,EACLe,4BAA2B,mCAAE,WAAOwF,GAAP,iFACrBxF,EAA4BwF,GADP,sCAAF,2DAG3BzF,MAAOmF,EACPpF,aACEoF,EAAUM,wBACNzG,EAAcmG,EAAUM,wBAAyBvG,GAuCjDU,GAxGL,ECXQ,SAASkH,EAA4BC,GAClD,IAAQ3B,EAAgC2B,EAAhC3B,KAAM4B,EAA0BD,EAA1BC,SAAcrC,EAAYoC,EAAhBhE,GAExB,OACE2D,EAAAA,cAACO,EAAAA,EAAD,CACE3D,MAAO,iBACP4D,YAAa,OACbvC,QAASA,EACTwC,gBAAgB,EAChBC,UAAWX,EAAAA,EAAAA,WAAkB9B,GAC7BqC,SAAUA,GAEVN,EAAAA,cAAChC,EAAD,CACExF,IAAKkG,EAAI,+BACTT,QAASA,IAIhB,C,mGCtBK0C,EAAcC,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,qDAMF,SAAS/E,IACtB,OACE,gBAAC,EAAAgF,YAAD,CACEC,MAAK,YASLC,OAAQ,SAACrC,GAAD,OACN,gBAACiC,EAAD,KACE,gBAAC,EAAAK,EAAD,CACEC,MAAOvC,EAAKwC,QAAQC,gBAAgBC,gBACpCC,IAAK,oBAJH,GAUb,C","sources":["webpack://hufschuhapp.frontend/./src/services/upload/factFileParticularities/parseFactFileParticularities.js","webpack://hufschuhapp.frontend/./src/components/App/FactFile/Particularities/FactFileParticularitiesForm.js","webpack://hufschuhapp.frontend/./src/components/App/FactFile/Particularities/FactFileParticularitiesData.tsx","webpack://hufschuhapp.frontend/./src/pages/pferde/[id]/besonderheiten.tsx","webpack://hufschuhapp.frontend/./src/components/App/Misc/Logo.js"],"sourcesContent":["import { findOption } from \"../../../components/App/Misc/strapiArrayToOptions\";\n\nconst fieldMapping = {\n  Equidenart: \"equineType\",\n  Rasse: \"race\",\n  Rasse_Andere: \"raceOthers\",\n  Reitweise: \"ridingStyle\",\n  Nutzungszeit: \"weeklyRidingTime\",\n  Beschlagen: \"hasHorseShoe\",\n  Vorerkrankungen: \"preconditions\",\n  Vorerkrankungen_Andere: \"preconditionsOther\",\n  Hufvorerkrankungen: \"hoofPreconditions\",\n  Hufvorerkrankungen_Andere: \"hoofPreconditionsOther\",\n  Stellungsanomalien: \"positionAnomalies\",\n  Stellungsanomalien_Andere: \"positionAnomaliesOther\",\n};\n\nexport function localToStrapi(state) {\n  // attributes that need to be changed\n  const {\n    Equidenart,\n    Reitweise,\n    Vorerkrankungen,\n    Nutzungszeit,\n    Rasse,\n    Hufvorerkrankungen,\n    Stellungsanomalien,\n    ...restState\n  } = state;\n\n  const convertedFields = {};\n  const toConvert = [\n    \"Equidenart\",\n    \"Reitweise\",\n    \"Vorerkrankungen\",\n    \"Nutzungszeit\",\n    \"Rasse\",\n    \"Hufvorerkrankungen\",\n    \"Stellungsanomalien\",\n  ];\n\n  toConvert.forEach((key) => {\n    convertedFields[key] = state[key].value;\n  });\n\n  return Object.assign(restState, convertedFields);\n}\n\nexport function strapiToLocal(state, cms) {\n  // attributes that need to be changed\n  const {\n    Equidenart,\n    Reitweise,\n    Vorerkrankungen,\n    Nutzungszeit,\n    Rasse,\n    Hufvorerkrankungen,\n    Stellungsanomalien,\n    ...restState\n  } = state;\n\n  const convertedFields = {};\n  const toConvert = [\n    \"Equidenart\",\n    \"Reitweise\",\n    \"Vorerkrankungen\",\n    \"Nutzungszeit\",\n    \"Rasse\",\n    \"Hufvorerkrankungen\",\n    \"Stellungsanomalien\",\n  ];\n\n  toConvert.forEach((key) => {\n    convertedFields[key] = findOption(\n      cms[key].Optionen.strapi_json_value,\n      state[fieldMapping[key]]\n    );\n  });\n\n  return Object.assign(restState, convertedFields);\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { FactFileForm } from \"../styled\";\nimport { onSelectChange, onStarRatingChange } from \"../inputChangeHandlers\";\nimport { InputGroup, TypedInput } from \"../TypedInput\";\nimport { Button } from \"../../Misc/Button\";\nimport Select from \"react-select\";\nimport { HoofshoeRanking } from \"../General/styled\";\nimport Rating from \"react-simple-star-rating\";\nimport colors from \"../../../../constants/colors\";\nimport { navigate } from \"gatsby\";\nimport routes from \"../../../../constants/routes\";\nimport { putFactFileParticularities } from \"../../../../services/upload/factFileParticularities/putFactFileParticularities\";\nimport {\n  localToStrapi,\n  strapiToLocal,\n} from \"../../../../services/upload/factFileParticularities/parseFactFileParticularities\";\nimport store from \"../../../../redux/store\";\nimport Logo, { LogoImg } from \"../../Misc/Logo\";\nimport * as Sentry from \"@sentry/gatsby\";\n\nexport const f2initial = {\n  Equidenart: \"\",\n  Rasse: \"\",\n  Rasse_Andere: \"\",\n  Reitweise: \"\",\n  Reitweise_Andere: \"\",\n  Nutzungszeit: \"\",\n  Beschlagen: false,\n  Vorerkrankungen: \"\",\n  Vorerkrankungen_Andere: \"\",\n  Hufvorerkrankungen: \"\",\n  Hufvorerkrankungen_Andere: \"\",\n  Stellungsanomalien: \"\",\n  Stellungsanomalien_Andere: \"\",\n};\n\nexport default function FactFileParticularitiesForm({\n  cms,\n  horse,\n  initialState,\n  saveFactFileParticularities,\n}) {\n  const [state, setState] = useState(initialState || f2initial);\n\n  const messagRef = useRef();\n  const [message, setMessage] = useState(\"\");\n  const fileInputRef = useRef();\n  const [fileInputChange, setFileInputChange] = useState(false);\n\n  console.log(state, cms);\n\n  // if data is sourced from strapi, need to parse some field, e.g. checkbox and selects\n  useEffect(() => {\n    console.log(state);\n    // check if one field that should be a select value is a string,\n    // if yes all are sourced from strapi and not yet converted\n    if (typeof state.Equidenart === \"string\" && state.Equidenart) {\n      console.log(\"need to parse\");\n      setState(strapiToLocal(state, cms));\n    }\n    console.log(state);\n  }, []);\n\n  // read file\n  useEffect(() => {\n    if (fileInputRef.current?.files?.[0]) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setState((prevState) => ({\n          ...prevState,\n          StellungsanomalienFotos: event.target.result,\n        }));\n      };\n      reader.readAsDataURL(fileInputRef.current.files[0]);\n    }\n  }, [fileInputChange]);\n\n  // saves form\n  function onSubmit(event) {\n    event.preventDefault();\n\n    let findEmptyField = false;\n\n    console.log(state);\n\n    // toggle flag to true if field is missing\n    Object.keys(state).forEach((key) => {\n      const item = state[key];\n      if (\n        item &&\n        ((typeof item === \"object\" && Object.keys(item).length === 0) ||\n          !item) &&\n        !key.endsWith(\"Andere\") &&\n        !key.endsWith(\"Fotos\") &&\n        key !== \"Rasse\" &&\n        key !== \"Beschlagen\"\n      ) {\n        console.log(\"0 missing\");\n\n        findEmptyField = true;\n      }\n    });\n\n    // check if the additional fields need to be filled out\n    [\n      \"Rasse\",\n      \"Reitweise\",\n      \"Vorerkrankungen\",\n      \"Hufvorerkrankungen\",\n      \"Stellungsanomalien\",\n    ].forEach((p) => {\n      if (\n        !state[p] ||\n        (state[p].index === cms[p].Optionen.length - 1 && !state[p + \"_Andere\"])\n      ) {\n        console.log(\"1 missing\");\n        findEmptyField = true;\n      }\n    });\n\n    if (\n      !state[\"Rasse\"] ||\n      state[\"Rasse\"].index === cms[\"Rasse\"].Optionen.length - 1 ||\n      (state[\"Rasse\"].index === cms[\"Rasse\"].Optionen.length - 2 &&\n        !state[\"Rasse\" + \"_Andere\"])\n    ) {\n      console.log(\"Rasse missing\");\n      findEmptyField = true;\n    }\n\n    if (findEmptyField) {\n      setMessage(cms.Meta.FelderFehlen);\n      messagRef.current.style.display = \"inline\";\n      return;\n    }\n\n    saveFactFileParticularities(localToStrapi(state));\n  }\n\n  return (\n    // Queries for the images used for image select inputs\n    // order is given by the query in the page.\n    // Alternatively, add order fields in strapi and sort here.\n    <FactFileForm onSubmit={onSubmit}>\n      <Logo />\n      {Object.keys(cms).map((key, index) => {\n        if (key === \"Meta\") return;\n        const field = cms[key];\n\n        /*\n          Fields that have special conditions etc.\n          */\n        let showHint;\n        let insertAfterInput;\n\n        /* RASSE */\n        if (key === \"Rasse\") {\n          // display only if pferde or pony is selected\n          if (\n            !(\n              state[\"Equidenart\"].value ===\n                cms[\"Equidenart\"].Optionen.strapi_json_value[0] ||\n              state[\"Equidenart\"].value ===\n                cms[\"Equidenart\"].Optionen.strapi_json_value[1]\n            )\n          ) {\n            return;\n          }\n          // if \"Andere\" or \"Rassenmix\" is selected, show another input field\n          if (\n            state[key] &&\n            (state[key].value ===\n              cms[\"Rasse\"].Optionen[cms[\"Rasse\"].Optionen.length - 1] ||\n              state[key].value ===\n                cms[\"Rasse\"].Optionen[cms[\"Rasse\"].Optionen.length - 2])\n          ) {\n            insertAfterInput = (\n              <>\n                <div className={\"insert-field\"}>\n                  <label htmlFor={key + \"additional-field\"}>\n                    {cms.Rasse.Titel_Mischung}\n                  </label>\n                  <TypedInput\n                    id={key + \"additional-field\"}\n                    state={state}\n                    setState={setState}\n                    name={\"Rasse_Andere\"}\n                    value={state[\"Rasse_Andere\"]}\n                    type={\"text\"}\n                  />\n                </div>\n              </>\n            );\n          }\n        }\n\n        /* REITWEISE */\n        if (key === \"Reitweise\") {\n          // if \"Andere\" is selected, show another input field\n          if (\n            state[\"Reitweise\"] &&\n            state[\"Reitweise\"].value ===\n              cms[\"Reitweise\"].Optionen[cms[\"Reitweise\"].Optionen.length - 1]\n          ) {\n            insertAfterInput = (\n              <div className={\"insert-field\"}>\n                <label htmlFor={key + \"additional-field\"}>\n                  {cms.Reitweise.Titel_Andere}\n                </label>\n                <TypedInput\n                  id={key + \"additional-field\"}\n                  state={state}\n                  setState={setState}\n                  name={\"Reitweise_Andere\"}\n                  value={state[\"Reitweise_Andere\"]}\n                  type={\"text\"}\n                />\n              </div>\n            );\n          }\n        }\n\n        /* VORERKRANKUNGEN */\n        // if \"Andere\" is selected, show another input field\n        const optionsV = cms[\"Vorerkrankungen\"].Optionen;\n        if (\n          key === \"Vorerkrankungen\" &&\n          state[\"Vorerkrankungen\"] &&\n          state[\"Vorerkrankungen\"].value === optionsV[optionsV.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Vorerkrankungen.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Vorerkrankungen_Andere\"}\n                value={state[\"Vorerkrankungen_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /* HUFVORERKRANKUNGEN */\n        // if \"Andere\" is selected, show another input field\n        const optionsHV = cms[\"Hufvorerkrankungen\"].Optionen;\n        if (\n          key === \"Hufvorerkrankungen\" &&\n          state[\"Hufvorerkrankungen\"] &&\n          state[\"Hufvorerkrankungen\"].value === optionsHV[optionsHV.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Hufvorerkrankungen.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Hufvorerkrankungen_Andere\"}\n                value={state[\"Hufvorerkrankungen_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /* STELLUNGSANOMALIEN */\n        const optionsSA = cms[\"Stellungsanomalien\"].Optionen;\n        if (\n          key === \"Stellungsanomalien\" &&\n          state[\"Stellungsanomalien\"] &&\n          state[\"Stellungsanomalien\"].value === optionsSA[optionsSA.length - 1]\n        ) {\n          insertAfterInput = (\n            <div className={\"insert-field\"}>\n              <label htmlFor={key + \"additional-field\"}>\n                {cms.Stellungsanomalien.Titel_Andere}\n              </label>\n              <TypedInput\n                id={key + \"additional-field\"}\n                state={state}\n                setState={setState}\n                name={\"Stellungsanomalien_Andere\"}\n                value={state[\"Stellungsanomalien_Andere\"]}\n                type={\"textarea\"}\n              />\n            </div>\n          );\n        }\n\n        /*\n          Automatic generation for default fields\n           */\n        return (\n          <InputGroup\n            title={field.Titel}\n            subtext={field.Subtext}\n            help={field.Hilfstext}\n            hint={field.Hinweis}\n            showHint={showHint}\n            key={\"input-group\" + index}\n          >\n            <TypedInput\n              state={state}\n              setState={setState}\n              name={key}\n              value={state[key]}\n              options={field.Optionen}\n              type={field.Typ?.toLowerCase() || \"select\"}\n              images={[\n                field.Bild1?.localFile,\n                field.Bild2?.localFile,\n                field.Bild3?.localFile,\n              ]}\n            />\n            {insertAfterInput}\n          </InputGroup>\n        );\n      })}\n\n      <div className={\"bottom-row\"}>\n        <span className={\"fill-out\"} ref={messagRef}>\n          {message}\n        </span>\n        <Button className={\"primary save-button\"}>{cms.Meta.Speichern}</Button>\n      </div>\n    </FactFileForm>\n  );\n}\n","import {\n  useHorseQuery,\n  useUpdateHorseMutation,\n} from \"../../../../redux/api/horseApi\";\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../../redux/store\";\nimport routes from \"../../../../constants/routes\";\nimport { navigate } from \"gatsby\";\nimport FactFileParticularitiesForm, {\n  f2initial,\n} from \"./FactFileParticularitiesForm\";\nimport { Alert } from \"@mui/material\";\nimport { strapiToLocal } from \"../../../../services/upload/factFileParticularities/parseFactFileParticularities\";\n\ntype FactFileParticularitiesDataProps = {\n  cms: any;\n  horseId: string;\n};\n\nexport const FactFileParticularitiesData = ({\n  horseId,\n  cms,\n}: FactFileParticularitiesDataProps) => {\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  const { data: horseData, isLoading } = useHorseQuery(\n    { userId: user?.id as string, horseId: horseId },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: !horseId,\n    }\n  );\n\n  const [updateHorse, updateHorseResult] = useUpdateHorseMutation();\n\n  const saveFactFileParticularities = async (factFileParticularities: any) => {\n    const horsePatch = {\n      factFileParticularities: {\n        equineType: factFileParticularities.Equidenart,\n        race: factFileParticularities.Rasse,\n        raceOthers: factFileParticularities.Rasse_Andere,\n        ridingStyle: factFileParticularities.Reitweise,\n        weeklyRidingTime: factFileParticularities.Nutzungszeit,\n        hoofPreconditions: factFileParticularities.Hufvorerkrankungen,\n        hoofPreconditionsOther:\n          factFileParticularities.Hufvorerkrankungen_Andere,\n        positionAnomalies: factFileParticularities.Stellungsanomalien,\n        positionAnomaliesOther:\n          factFileParticularities.Stellungsanomalien_Andere,\n        preconditions: factFileParticularities.Vorerkrankungen,\n        preconditionsOther: factFileParticularities.Vorerkrankungen_Andere,\n      },\n    };\n\n    await updateHorse({\n      userId: user?.id,\n      horseId: horseId,\n      data: horsePatch,\n    });\n  };\n\n  useEffect(() => {\n    if (updateHorseResult.isSuccess) {\n      navigate(routes.detailView(horseId));\n    }\n  }, [updateHorseResult]);\n\n  if (isLoading || updateHorseResult.isLoading) {\n    return <span>Lädt..</span>;\n  }\n\n  if (updateHorseResult.error) {\n    return <Alert severity={\"error\"}>Fehler beim Speichern</Alert>;\n  }\n\n  return (\n    <FactFileParticularitiesForm\n      cms={cms}\n      saveFactFileParticularities={async (factFileParticularities: any) => {\n        await saveFactFileParticularities(factFileParticularities);\n      }}\n      horse={horseData}\n      initialState={\n        horseData.factFileParticularities\n          ? strapiToLocal(horseData.factFileParticularities, cms)\n          : // {\n            //   Equidenart: findOption(\n            //     cms.Equidenart.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.equineType\n            //   ),\n            //   Rasse: findOption(\n            //     cms.Rasse.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.race\n            //   ),\n            //   Rasse_Andere: horseData.factFileParticularities.raceOthers,\n            //   Reitweise: findOption(\n            //     cms.Reitweise.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.ridingStyle\n            //   ),\n            //   Nutzungszeit: findOption(\n            //     cms.Nutzungszeit.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.weeklyRidingTime\n            //   ),\n            //   Beschlagen: horseData.factFileParticularities.hasHorseShoe,\n            //   Vorerkrankungen: findOption(\n            //     cms.Vorerkrankungen.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.preconditions\n            //   ),\n            //   Vorerkrankungen_Andere:\n            //     horseData.factFileParticularities.preconditionsOther,\n            //   Hufvorerkrankungen: findOption(\n            //     cms.Hufvorerkrankungen.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.hoofPreconditions\n            //   ),\n            //   Hufvorerkrankungen_Andere:\n            //     horseData.factFileParticularities.hoofPreconditionsOther,\n            //   Stellungsanomalien: findOption(\n            //     cms.Stellungsanomalien.Optionen.strapi_json_value,\n            //     horseData.factFileParticularities.positionAnomalies\n            //   ),\n            //   Stellungsanomalien_Andere:\n            //     horseData.factFileParticularities.positionAnomaliesOther,\n            // }\n            f2initial\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport AppLayout from \"../../../components/App/Layout\";\nimport { Particularities } from \"../../../components/App/FactFile/Particularities\";\nimport { General } from \"../../../components/App/FactFile/General\";\nimport routes from \"../../../constants/routes\";\nimport { FactFileParticularitiesData } from \"../../../components/App/FactFile/Particularities/FactFileParticularitiesData\";\nimport { classNames } from \"react-select/dist/declarations/src/utils\";\n\nexport default function FactFileParticularitiesPage(props: any) {\n  const { data, location, id: horseId } = props;\n\n  return (\n    <AppLayout\n      title={\"Besonderheiten\"}\n      subtitleKey={\"name\"}\n      horseId={horseId}\n      showNavigation={true}\n      lastRoute={routes.detailView(horseId)}\n      location={location}\n    >\n      <FactFileParticularitiesData\n        cms={data[\"strapiSteckbriefBesonderheiten\"]}\n        horseId={horseId}\n      />\n    </AppLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    strapiSteckbriefBesonderheiten {\n      Meta {\n        Titel\n        Speichern\n        FelderFehlen\n      }\n      Equidenart {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n      }\n      Rasse {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Mischung\n        Subtext\n      }\n      Reitweise {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n        Titel_Andere\n      }\n      Nutzungszeit {\n        Titel\n        Hilfstext\n        Typ\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Subtext\n      }\n      Beschlagen {\n        Titel\n        Hilfstext\n        Typ\n      }\n      Vorerkrankungen {\n        Titel\n        Hilfstext\n        Subtext\n        Optionen {\n          id\n          strapi_json_value\n        }\n      }\n      Hufvorerkrankungen {\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Andere\n        Subtext\n      }\n      Stellungsanomalien {\n        Subtext\n        Titel\n        Hilfstext\n        Optionen {\n          id\n          strapi_json_value\n        }\n        Titel_Andere\n        Hinweis\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst LogoWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function Logo() {\n  return (\n    <StaticQuery\n      query={graphql`\n        {\n          logoBig: file(relativePath: { eq: \"logoBig.png\" }) {\n            childImageSharp {\n              gatsbyImageData(width: 400, layout: CONSTRAINED)\n            }\n          }\n        }\n      `}\n      render={(data) => (\n        <LogoWrapper>\n          <GatsbyImage\n            image={data.logoBig.childImageSharp.gatsbyImageData}\n            alt={\"Equilandoo Logo\"}\n          />\n        </LogoWrapper>\n      )}\n    />\n  );\n}\n"],"names":["fieldMapping","Equidenart","Rasse","Rasse_Andere","Reitweise","Nutzungszeit","Beschlagen","Vorerkrankungen","Vorerkrankungen_Andere","Hufvorerkrankungen","Hufvorerkrankungen_Andere","Stellungsanomalien","Stellungsanomalien_Andere","strapiToLocal","state","cms","restState","convertedFields","forEach","key","findOption","Optionen","strapi_json_value","Object","assign","f2initial","Reitweise_Andere","FactFileParticularitiesForm","initialState","horse","saveFactFileParticularities","useState","setState","messagRef","useRef","message","setMessage","fileInputRef","fileInputChange","console","log","useEffect","current","files","reader","FileReader","onload","event","prevState","StellungsanomalienFotos","target","result","readAsDataURL","onSubmit","preventDefault","findEmptyField","keys","item","length","endsWith","p","index","Meta","FelderFehlen","style","display","value","localToStrapi","Logo","map","insertAfterInput","field","className","htmlFor","Titel_Mischung","TypedInput","id","name","type","Titel_Andere","optionsV","optionsHV","optionsSA","title","Titel","subtext","Subtext","help","Hilfstext","hint","Hinweis","showHint","options","Typ","toLowerCase","images","Bild1","localFile","Bild2","Bild3","ref","Button","Speichern","FactFileParticularitiesData","horseId","user","useSelector","auth","useHorseQuery","userId","refetchOnMountOrArgChange","skip","horseData","data","isLoading","useUpdateHorseMutation","updateHorse","updateHorseResult","factFileParticularities","_context","horsePatch","equineType","race","raceOthers","ridingStyle","weeklyRidingTime","hoofPreconditions","hoofPreconditionsOther","positionAnomalies","positionAnomaliesOther","preconditions","preconditionsOther","isSuccess","navigate","routes","React","error","Alert","severity","FactFileParticularitiesPage","props","location","AppLayout","subtitleKey","showNavigation","lastRoute","LogoWrapper","styled","StaticQuery","query","render","G","image","logoBig","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}